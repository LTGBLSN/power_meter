C51 COMPILER V9.60.0.0   ADC                                                               03/29/2021 09:04:12 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Output\ADC.obj
COMPILER INVOKED BY: D:\Software\KeilC51\C51\BIN\C51.EXE Code\ADC\ADC.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include;.\Code
                    -\HX711;.\Code\KEY;.\Code\ADC;.\Code\DS18B20) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\ADC.lst) TABS(2) OBJECT(
                    -.\Output\ADC.obj)

line level    source

   1          
   2          #include "ADC.h"
   3          
   4          
   5          
   6          uint16_t gVot_BAT;                        //电池电压值
   7          uint32_t gVCC_voltage = 0;
   8          
   9          bit gVCC_Flag = 0;  //充电标志位
  10          
  11          void READ_BANDGAP()
  12          {/*
  13   1          unsigned int i;
  14   1          UINT8 BandgapHigh,BandgapLow,BandgapMark;
  15   1          double Bandgap_Value,Bandgap_Voltage_Temp;
  16   1        
  17   1          set_IAPEN;
  18   1          IAPCN = READ_UID;
  19   1          IAPAL = 0x0d;
  20   1          IAPAH = 0x00;
  21   1          set_IAPGO;
  22   1          BandgapLow = IAPFD;
  23   1          BandgapMark = BandgapLow&0xF0;
  24   1            
  25   1          if (BandgapMark==0x80)
  26   1          {
  27   1              BandgapLow = BandgapLow&0x0F;
  28   1              IAPAL = 0x0C;
  29   1              IAPAH = 0x00;
  30   1              set_IAPGO;
  31   1              BandgapHigh = IAPFD;
  32   1              Bandgap_Value = (BandgapHigh<<4)+BandgapLow;
  33   1              Bandgap_Voltage_Temp = Bandgap_Value*3/4;
  34   1              Bandgap_Voltage = Bandgap_Voltage_Temp - 33;      //the actually banggap voltage value is similar this va
             -lue.
  35   1          }
  36   1          if (BandgapMark==0x00)
  37   1          {
  38   1              BandgapLow = BandgapLow&0x0F;
  39   1              IAPAL = 0x0C;
  40   1              IAPAH = 0x00;
  41   1              set_IAPGO;
  42   1              BandgapHigh = IAPFD;
  43   1              Bandgap_Value = (BandgapHigh<<4)+BandgapLow;
  44   1              Bandgap_Voltage= Bandgap_Value*3/4;
  45   1          }
  46   1          if (BandgapMark==0x90)
  47   1          {
  48   1              IAPAL = 0x0E;
  49   1              IAPAH = 0x00;
  50   1              set_IAPGO;
  51   1              BandgapHigh = IAPFD;
  52   1              IAPAL = 0x0F;
C51 COMPILER V9.60.0.0   ADC                                                               03/29/2021 09:04:12 PAGE 2   

  53   1              IAPAH = 0x00;
  54   1              set_IAPGO;
  55   1              BandgapLow = IAPFD;
  56   1              BandgapLow = BandgapLow&0x0F;
  57   1              Bandgap_Value = (BandgapHigh<<4)+BandgapLow;
  58   1              Bandgap_Voltage= Bandgap_Value*3/4;
  59   1          }
  60   1          clr_IAPEN;
  61   1          
  62   1          */
  63   1          
  64   1        
  65   1        
  66   1      }
  67          
  68          
  69          xdata uint32_t voltage=0;
  70          
  71          xdata u8 Num=0;
  72          xdata uint16_t gAve_BATVot = 0;
  73          
  74          xdata uint16_t BandGap_H, BandGap_L;
  75          xdata uint16_t BandGap_v;
  76          void ADC_ISR()
  77          {
  78   1        xdata uint16_t  AIN3_H, AIN3_L/*,BandGap_v*/; 
  79   1        xdata uint32_t AIN3_v = 0;
  80   1      
  81   1        Enable_ADC_BandGap;   
  82   1        clr_ADCF;
  83   1        set_ADCS;       // Each time ADC start trig signal
  84   1        while(ADCF == 0);
  85   1          clr_ADCF;
  86   1        set_ADCS;       // Each time ADC start trig signal
  87   1        while(ADCF == 0);
  88   1          clr_ADCF;
  89   1        set_ADCS;       // Each time ADC start trig signal
  90   1        while(ADCF == 0);
  91   1        BandGap_H = ADCRH;
  92   1        BandGap_L = ADCRL;
  93   1        BandGap_v = BandGap_H << 4 | BandGap_L;
  94   1      
  95   1        
  96   1        Enable_ADC_AIN6;
  97   1        
  98   1        clr_ADCF;
  99   1        set_ADCS;//使能ADCS，启动ADC测量
 100   1        
 101   1        
 102   1        while(ADCF == 0);
 103   1        clr_ADCF;//清除ADC转化完成标志，进行下一次转换
 104   1        set_ADCS;//当单次转换完成后，ADCS会硬件置0，需要重新使能
 105   1        AIN3_H = ADCRH;
 106   1        AIN3_L = ADCRL;
 107   1        AIN3_v = AIN3_H << 4 | AIN3_L;
 108   1      
 109   1        voltage = (uint16_t)((uint32_t)AIN3_v * 1220 / BandGap_v );   
 110   1        
 111   1        gVot_BAT = (uint32_t) (voltage * ((RES_PAR + RES_SER) / 100) / RES_PAR );
 112   1        
 113   1        Num ++; 
 114   1        
C51 COMPILER V9.60.0.0   ADC                                                               03/29/2021 09:04:12 PAGE 3   

 115   1        gAve_BATVot += gVot_BAT;
 116   1        
 117   1        gVot_BAT = gAve_BATVot / Num;
 118   1        
 119   1        if(Num >= 50)
 120   1        {
 121   2          Num = 0;
 122   2          gAve_BATVot = 0;
 123   2        }
 124   1        
 125   1        
 126   1        Enable_ADC_AIN5;
 127   1        
 128   1        clr_ADCF;
 129   1        set_ADCS;//使能ADCS，启动ADC测量
 130   1        
 131   1        while(ADCF == 0);
 132   1        clr_ADCF;//清除ADC转化完成标志，进行下一次转换
 133   1        set_ADCS;//当单次转换完成后，ADCS会硬件置0，需要重新使能
 134   1        
 135   1        AIN3_H = ADCRH;
 136   1        AIN3_L = ADCRL;
 137   1        AIN3_v = AIN3_H << 4 | AIN3_L;
 138   1      
 139   1        gVCC_voltage = (uint16_t)((uint32_t)AIN3_v * 1220 / BandGap_v );  
 140   1      }
 141          
 142          
 143          
 144          
 145          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    485    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
